아래는 바로 복사해서 Cursor Rule(커서룰)이나 `@recipe.mdc`에 붙여넣을 수 있도록 **템플릿 형태**로 정리한 예시입니다.  
각 파일의 목적, 주요 섹션, 샘플 목차까지 포함되어 있어, 새로운 프로젝트마다 그대로 복사해서 사용하시면 됩니다.

---

## 📁 프로젝트 문서 템플릿 (PLANNING.md, DESIGN.md, OPERATION_MANUAL.md, MANAGEMENT.md)

---

### 1. `PLANNING.md`  
**[제품 기획/전략 문서 템플릿]**

```
# PLANNING.md

## 1. 프로젝트 개요
- 한 줄 요약: Supabase MCP Server를 활용한 AI 기반 풀스택 개발 템플릿
- 미션/비전: 1인 개발자도 대기업 수준의 개발 경험 제공

## 2. 목표 및 성공 기준
- 단기 목표: 복잡한 설정 없이 1분 내 개발 환경 구축
- 장기 목표: AI 기반 개발 워크플로우의 표준 확립
- 성공의 정의(DoD): 초보자도 쉽게 따라할 수 있는 완전한 가이드 제공

## 3. 주요 기능 목록
- 필수 기능:
  - Next.js 15 + React 19 최신 스택
  - Supabase 올인원 백엔드 (Auth, DB, Storage, Realtime)
  - TailwindCSS 4.0 + Shadcn/UI 디자인 시스템
  - MCP Server 기반 AI 데이터베이스 관리
- 선택 기능:
  - 결제 시스템 연동 (Stripe)
  - 이메일 서비스 (Resend)
  - 분석 도구 (Google Analytics)

## 4. 유저 시나리오/플로우
- 주요 사용자 유형(페르소나):
  - 초보 개발자: 복잡한 설정 없이 바로 시작
  - 1인 개발자: 빠른 MVP 개발
  - 스타트업: 검증된 패턴으로 안정적 개발
- 대표 시나리오:
  1. 프로젝트 클론 → 환경변수 설정 → 개발 서버 실행
  2. MCP Server로 자연어 데이터베이스 설계
  3. Shadcn/UI 컴포넌트로 빠른 UI 구성

## 5. 인수 조건(완료 기준)
- 기능별 인수 조건:
  - [ ] 1분 내 프로젝트 설정 완료
  - [ ] MCP Server 정상 작동
  - [ ] 모든 예시 코드 실행 가능
  - [ ] 문서 완성도 90% 이상

## 6. 경쟁/시장 분석
- 벤치마킹: Create Next App, T3 Stack, Supabase Starter
- 차별점: MCP Server 통합, AI 기반 개발, 초보자 친화적 가이드

## 7. 로드맵/일정
- 마일스톤:
  - Phase 1: 기본 템플릿 완성
  - Phase 2: MCP Server 통합
  - Phase 3: 문서화 및 가이드 작성
- 우선순위: 사용성 > 기능 > 성능
```

---

### 2. `DESIGN.md`  
**[UI/UX, 기술 설계 문서 템플릿]**

```
# DESIGN.md

## 1. 와이어프레임/프로토타입
- 페이지별 레이아웃 설명:
  - 홈페이지: 프로젝트 소개 + 주요 기능 안내
  - 문서 페이지: 단계별 온보딩 가이드
  - 예시 페이지: 실제 구현 예시 모음
- 주요 컴포넌트 구조:
  - Layout → Page → Components → UI Elements

## 2. 컴포넌트 트리
- 전체 컴포넌트 구조:
  ```
  App
  ├── Layout (Root)
  ├── Providers (Query, Theme)
  ├── Pages (Home, Docs, Examples)
  ├── Components (Auth, Common)
  └── UI (Shadcn/UI)
  ```
- 각 컴포넌트 역할: 단일 책임 원칙 준수

## 3. 상태 관리 설계
- 전역/로컬/서버 상태 분류:
  - URL 상태: 라우팅, 필터링
  - UI 상태: 모달, 로딩
  - 전역 상태: 인증, 테마
  - 서버 상태: API 데이터 (TanStack Query)

## 4. DB/스키마 설계
- ERD: Supabase Auth 기본 + 사용자 확장 테이블
- 테이블/필드 정의:
  - users: 사용자 기본 정보
  - profiles: 사용자 프로필 확장
  - posts: 블로그/게시물 (예시)
- 샘플 데이터: 개발/테스트용 시드 데이터

## 5. API 명세
- 엔드포인트: Supabase 자동 생성 REST API
- Server Actions: Next.js 15 패턴
- 실시간: Supabase Realtime 구독

## 6. 접근성/SEO/반응형
- 체크리스트:
  - [ ] WCAG 2.1 AA 준수
  - [ ] 시맨틱 HTML 사용
  - [ ] 키보드 네비게이션 지원
  - [ ] 다크모드 지원
- 적용 방법: Shadcn/UI 기본 지원 + 추가 설정

## 7. 기술 스택/아키텍처
- 사용 기술:
  - Frontend: Next.js 15, React 19, TypeScript
  - UI: TailwindCSS 4.0, Shadcn/UI, Framer Motion
  - Backend: Supabase (All-in-One)
  - Development: Turbopack, MCP Server
- 폴더 구조: 원자적 컨텍스트 원칙
- 확장/테스트 전략: 점진적 개선
```

---

### 3. `OPERATION_MANUAL.md`  
**[운영/배포/장애 대응 매뉴얼 템플릿]**

```
# OPERATION_MANUAL.md

## 1. 배포/롤백 절차
- 배포 명령어/스크립트:
  ```bash
  # Vercel 배포 (권장)
  pnpm build && vercel --prod
  
  # 다른 플랫폼
  pnpm build && pnpm start
  ```
- 환경변수 설정: Vercel 대시보드에서 .env.local 내용 복사
- 롤백 방법: Vercel 대시보드에서 이전 배포로 롤백

## 2. 백업/복구
- DB 백업: Supabase 자동 백업 (7일 보관)
- 파일 백업: Supabase Storage 자동 복제
- 복구 절차: Supabase 대시보드에서 백업 복원

## 3. 모니터링/알림
- 장애 감지: Vercel Analytics + Supabase 모니터링
- 로그 확인: Vercel Functions 로그, Supabase 로그
- 알림 설정: 이메일/Slack 웹훅 연동

## 4. 운영 체크리스트
- 배포 전 점검:
  - [ ] 타입 검사 통과
  - [ ] 린트 검사 통과
  - [ ] 빌드 성공
  - [ ] 환경변수 설정 확인
- 배포 후 점검:
  - [ ] 사이트 정상 접속
  - [ ] 주요 기능 테스트
  - [ ] 성능 지표 확인

## 5. 장애/이슈 대응
- 자주 발생하는 문제/해결법:
  - Supabase 연결 오류 → 환경변수 재확인
  - 빌드 실패 → 타입 오류 수정
  - 성능 저하 → 이미지 최적화, 캐싱 설정
- FAQ: README.md 참조

## 6. 운영 자동화
- 반복 작업 자동화:
  - GitHub Actions: CI/CD 파이프라인
  - Vercel: 자동 배포
  - Supabase: 데이터베이스 마이그레이션
```

---

### 4. `MANAGEMENT.md`  
**[관리 정책/보안/운영 규정 템플릿]**

```
# MANAGEMENT.md

## 1. 관리자 권한/역할
- 계정 관리: Supabase Auth 기반
- 권한 분리:
  - 사용자: 기본 CRUD 권한
  - 관리자: 전체 데이터 접근
  - 서비스: Service Role Key 사용
- 접근 제어: RLS (Row Level Security) 정책

## 2. 보안 정책
- RLS 정책:
  ```sql
  -- 사용자는 자신의 데이터만 접근
  CREATE POLICY "Users own data" ON profiles
    FOR ALL USING (auth.uid() = user_id);
  ```
- 환경변수 보안:
  - 클라이언트: NEXT_PUBLIC_ 접두사만
  - 서버: 민감한 키는 서버 전용
- 2FA: Supabase Auth 지원

## 3. 데이터/개인정보 보호
- 수집 데이터: 최소한의 필수 정보만
- 저장 정책: Supabase 암호화 저장
- 삭제 정책: 사용자 요청 시 즉시 삭제
- 로그 관리: 개인정보 제외한 시스템 로그만

## 4. 운영 규정
- 변경 절차:
  1. 개발 → 테스트 → 스테이징 → 프로덕션
  2. 코드 리뷰 필수
  3. 백업 확인 후 배포
- 승인 프로세스: Pull Request 기반
- 삭제 절차: 관리자 승인 + 백업 확인

## 5. 법적/윤리적 이슈
- 저작권: MIT 라이선스 준수
- 개인정보: GDPR, CCPA 준수
- 오픈소스: 사용 라이브러리 라이선스 확인

## 6. 관리자용 FAQ/팁
- 자주 묻는 질문:
  - Q: 사용자 데이터를 어떻게 확인하나요?
  - A: Supabase 대시보드에서 SQL 에디터 사용
- 실수 방지 체크리스트:
  - [ ] 프로덕션 DB 직접 수정 금지
  - [ ] 백업 없이 마이그레이션 금지
  - [ ] Service Role Key 공유 금지
```

---

## 🎯 사용법

1. **프로젝트 시작 시**: 위 4개 파일을 프로젝트 루트에 생성
2. **내용 수정**: 프로젝트 특성에 맞게 템플릿 내용 수정
3. **지속 업데이트**: 개발 진행에 따라 문서 업데이트
4. **팀 공유**: 모든 팀원이 문서를 참조하여 일관성 유지

이 템플릿은 **Project Forge 2025**의 철학인 "예측 가능성, 일관성, AI 친화성"을 문서에도 적용한 것입니다. 🚀


- 자주 묻는 질문:
- 실수 방지 체크리스트:
```

